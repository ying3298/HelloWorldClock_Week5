let chihiroImages = {};
let adventureImages = [];
let adventureMusics = [];  // Array for adventure music
let finalImage;
let successMusic;
let hunger = 4;
let happiness = 4;
let age = 0;
let dayCounter = 0;
let adventureActive = false;  // Flag for adventure state
let adventureStartTime;  // Adventure start time
let adventureDuration = 10; // Adventure duration (in seconds)
let currentAdventureIndex; // Stores the current adventure image index

// Add GIF variables
let feedGif;
let playGif;

let timeInterval = 10;
let lastTime = 0;
let isFinalStage = false;

function preload() {
  // Load Chihiro's different state images
  chihiroImages['normal'] = loadImage('chihiro_normal.jpeg');
  chihiroImages['hungry'] = loadImage('chihiro_hungry.jpeg');
  chihiroImages['sad'] = loadImage('chihiro_sad.jpeg');
  chihiroImages['final'] = loadImage('chihiro_final.jpg');
  
  // Load adventure images
  adventureImages[0] = loadImage('adventure_1.jpeg');
  adventureImages[1] = loadImage('adventure_2.jpeg');
  adventureImages[2] = loadImage('adventure_3.jpg');
  adventureImages[3] = loadImage('adventure_6.jpeg');

  // Load music
  successMusic = loadSound('success_music.mp3');
  
  // Load adventure music for each adventure
  adventureMusics[0] = loadSound('adventure_music_1.mp3');
  adventureMusics[1] = loadSound('adventure_music_2.mp3');
  adventureMusics[2] = loadSound('adventure_music_3.mp3');
  adventureMusics[3] = loadSound('adventure_music_6.mp3');

  // Load GIFs
  feedGif = createImg('feed.gif'); // Make sure you have this GIF
  feedGif.hide(); // Hide GIF, only show when needed
  playGif = createImg('play.gif'); // Make sure you have this GIF
  playGif.hide(); // Hide GIF, only show when needed
}

function setup() {
  createCanvas(800, 800);
  
  // Create interactive buttons
  let feedButton = createButton('Feed');
  feedButton.position(250, 10);
  feedButton.mousePressed(feedTamagotchi);
  
  let playButton = createButton('Play');
  playButton.position(300, 10);
  playButton.mousePressed(playWithTamagotchi);
  
  // Add adventure button
  let adventureButton = createButton('Go on an Adventure');
  adventureButton.position(350, 10);
  adventureButton.mousePressed(goOnAdventure);
}

function draw() {
  background(220);
  
  // If the adventure is active, display adventure images
  if (adventureActive) {
    let currentTime = millis() / 1000;  // Current time in seconds
    let elapsedTime = currentTime - adventureStartTime;
    if (elapsedTime < adventureDuration) {
      // Display the selected adventure image
      image(adventureImages[currentAdventureIndex], 0, 0, 1920/2, 1080/2);
    } else {
      // End the adventure
      adventureActive = false; // End adventure
      adventureMusics[currentAdventureIndex].stop(); // Stop adventure music
    }
  } else {
    // After the adventure, display different state images based on hunger and happiness
    displayCharacterState();
  }

  // Display status bars (hunger and happiness)
  displayStatus();

  // Display age
  fill(0);
  textSize(16);
  text('Age: ' + age, 10, height - 20); // Display age at the bottom of the canvas

  // If a GIF is showing, display it on the canvas
  if (feedGif.elt.style.display === 'block') {
    feedGif.position(300, 500); // Adjust position as needed
  }
  if (playGif.elt.style.display === 'block') {
    playGif.position(400, 500); // Adjust position as needed
  }

  // Regularly update time state
  if (millis() - lastTime >= timeInterval * 1000) {
    timePasses();
    lastTime = millis(); // Update last time
  }

  // Debug output
  console.log("Current State: ", isFinalStage, " Age: ", age, " Hunger: ", hunger, " Happiness: ", happiness);
}

function feedTamagotchi() {
  if (hunger < 4) {
    hunger++;
    feedGif.show(); // Show feeding GIF
    setTimeout(() => {
      feedGif.hide(); // Hide after 1 second
    }, 1000);
  }
}

function playWithTamagotchi() {
  if (happiness < 4) {
    happiness++;
    playGif.show(); // Show playing GIF
    setTimeout(() => {
      playGif.hide(); // Hide after 1 second
    }, 1000);
  }
}

// Adventure function
function goOnAdventure() {
  if (!adventureActive && !isFinalStage) { // Ensure the adventure is not repeated and not in the final stage
    age++;  // Age increases with each adventure
    currentAdventureIndex = floor(random(adventureImages.length)); // Randomly select an adventure image

    // Play corresponding adventure music
    adventureMusics[currentAdventureIndex].play();

    // Reduce happiness and hunger values after each adventure
    if (happiness > 0) {
      happiness--;  // Decrease happiness by 1
    }
    if (hunger > 1) {
      hunger -= 2;  // Decrease hunger by 2
    } else {
      hunger = 0; // Ensure hunger does not drop below 0
    }

    adventureActive = true; // Activate adventure state
    adventureStartTime = millis() / 1000; // Record adventure start time
  }
}

function displayCharacterState() {
  if (isFinalStage) {
    // Display final image
    image(chihiroImages['final'], 0, 0, 792, 555);
  } else {
    // Display different state images based on hunger and happiness
    if (hunger <= 1) {
      image(chihiroImages['hungry'], 0, 0, 736, 736);
    } else if (happiness <= 1) {
      image(chihiroImages['sad'], 0, 0, 693, 693);
    } else {
      image(chihiroImages['normal'], 0, 0, 1920 / 2, 1080 / 2); // Use normal image
    }
  }

  // Display age, hunger, and happiness status, ensuring it is not covered by the image
  displayStatus(); // Ensure this function is called after displayCharacterState
}

function displayStatus() {
  fill(255);
  textSize(16);
  text('Hunger: ', 10, 20);
  for (let i = 0; i < 4; i++) {
    if (i < hunger) {
      fill(255, 0, 0); // Filled
    } else {
      fill(200); // Empty
    }
    rect(70 + i * 20, 10, 15, 15);
  }
  
  fill(255);
  text('Happiness: ', 10, 40);
  for (let i = 0; i < 4; i++) {
    if (i < happiness) {
      fill(0, 255, 0); // Filled
    } else {
      fill(200); // Empty
    }
    rect(90 + i * 20, 30, 15, 15);
  }
}

function timePasses() {
  console.log("Time is passing... Hunger: ", hunger, " Happiness: ", happiness);
  dayCounter++;
  if (dayCounter % 5 === 0) {
    age++;
  }

  hunger--;
  happiness--;

  // Check if the final stage is reached, ensure it's executed only once
  if (!isFinalStage && age >= 3 && hunger > 2 && happiness > 2) {
    isFinalStage = true;
    successMusic.play();
  }

  // Check hunger and happiness status
  if (hunger <= 0 || happiness <= 0) {
    fill(255, 0, 0);
    textSize(32);
    text('Chihiro is not happy!', 50, 250);
    noLoop(); // Stop the game
  }
}

